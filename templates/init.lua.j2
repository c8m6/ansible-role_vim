-- cmp
local cmp = require'cmp'
cmp.setup({
  snippet = {
    expand = function(args)
      vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
    end,
  },
  window = {
    -- completion = cmp.config.window.bordered(),
    -- documentation = cmp.config.window.bordered(),
  },
  mapping = cmp.mapping.preset.insert({
    ['<C-b>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<C-e>'] = cmp.mapping.abort(),
    ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
  }),
  sources = cmp.config.sources({
    { name = 'nvim_lsp' },
    { name = 'vsnip' }, -- For vsnip users.
  }, {
    { name = 'buffer' },
  })
})
-- Use buffer source for `/` and `?` (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline({ '/', '?' }, {
  mapping = cmp.mapping.preset.cmdline(),
  sources = {
    { name = 'buffer' }
  }
})

-- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline(':', {
  mapping = cmp.mapping.preset.cmdline(),
  sources = cmp.config.sources({
    { name = 'path' }
  }, {
    { name = 'cmdline' }
  }),
  matching = { disallow_symbol_nonprefix_matching = false }
})

-- Set up lspconfig.
local capabilities = require('cmp_nvim_lsp').default_capabilities()
-- Replace <YOUR_LSP_SERVER> with each lsp server you've enabled.
-- require('lspconfig')['<YOUR_LSP_SERVER>'].setup {
--   capabilities = capabilities
-- }
-- vim diagnostic
local config = {
  signs = {
    active = signs, -- show signs
  },
  update_in_insert = false,
  underline = true,
  severity_sort = true,
  float = {
    focusable = true,
    style = 'minimal',
    border = 'single',
    source = 'always',
    header = 'Diagnostic',
    prefix = '',
  },
}
vim.diagnostic.config(config)
local signs = {
  Error = "îª‡",
  Warn = "î©¬",
  Hint = "ðŸ’¡",
  Info = "ï‘‰",
  DiagnosticSign =  "ðŸ’¡",
}
for type, icon in pairs(signs) do
  local hl = "DiagnosticSign" .. type
  vim.fn.sign_define(hl, {text = icon, texthl = hl, numhl = hl})
end

vim.lsp.handlers["textDocument/diagnostic"] = vim.lsp.with(
  vim.lsp.diagnostic.on_diagnostic, {
    update_in_insert = false,
  }
)

-- lsp config
local lspconfig = require('lspconfig')
local puppetlspdir = vim.fn.expand('~/.config/nvim/lsp/puppet-editor-services/puppet-languageserver')
require('lspconfig')['puppet'].setup {
  cmd = { puppetlspdir, "--stdio", "--puppet-settings=--moduledir,./modules" },
  root_dir = require("lspconfig.util").root_pattern(".git")
}
require('lspconfig')['dockerls'].setup {}
require('lspconfig')['docker_compose_language_service'].setup {}
require('lspconfig')['yamlls'].setup {}
require('lspconfig')['bashls'].setup {}
require('lspconfig')['rubocop'].setup {
  cmd = { 'rubocop', '--lsp' }
}
require('lspconfig')['ruby_lsp'].setup {
  cmd = { '/home/nvim/.local/share/gem/ruby/3.2.0/bin/ruby-lsp' },
}
require('lspconfig')['ansiblels'].setup {}
require('lspconfig')['nginx_language_server'].setup {}
require('lspconfig')['pylsp'].setup {}

-- filetypes
vim.filetype.add({
  pattern = {
    [".*/tasks/.*.yml"] = "yaml.ansible",
    ["docker-.y*"] = "yaml.docker"
  },
})

-- Auto open and close trouble window
require('trouble').setup {
  modes = {
    diagnostics = {
      auto_open = true, -- automatically open the list when you have diagnostics
      auto_close = true, -- automatically close the list when you have no diagnostics
      pinned = true,
      groups = {
        { "filename", format = "{file_icon} {basename:Title} {count}" },
      },
      filter = { buf = 0 }, -- filter diagnostics to the current buffer
    }
  }
}
require('dd').setup({
  -- The time to wait before displaying newly produced diagnostics.
  timeout = 0
})



