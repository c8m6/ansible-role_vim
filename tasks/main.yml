---
- name: Install some needed packages with apt
  ansible.builtin.apt:
    name: "{{ role_vim.install.apt }}"
    state: present
    update-cache: true
  become: true
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Install some mac specific packages with pip
  ansible.builtin.pip:
    name: "{{ role_vim.install.mac_pip }}"
    extra_args: '--user'
  when: ansible_distribution == 'MacOSX'

- name: Install some packages with pip
  ansible.builtin.pip:
    name: "{{ role_vim.install.pip }}"
    extra_args: '--user'
  when: (ansible_distribution == 'Ubuntu' and ansible_lsb.major_release|int < 24) or ansible_distribution != 'Ubuntu'

- name: Install some packages with pip for ubuntu 24
  ansible.builtin.pip:
    name: "{{ role_vim.install.pip }}"
    extra_args: '--user --break-system-packages'
  when: ansible_distribution == 'Ubuntu' and ansible_lsb.major_release|int >= 24

- name: Install packages with gem
  community.general.gem:
    name: "{{ item }}"
    state: present
  with_items:
    - "{{ role_vim.install.gem }}"

- name: Tap with homebrew
  community.general.homebrew_tap:
    name: "{{ role_vim.repo.homebrew }}"
    state: present
  when: ansible_distribution == 'MacOSX'

- name: Install some needed packages with homebrew
  community.general.homebrew:
    name: "{{ role_vim.install.homebrew }}"
    state: present
  when: ansible_distribution == 'MacOSX'

- name: Install npm package
  community.general.npm:
    name: "{{ item }}"
    global: true
  with_items:
    - "{{ role_vim.install.npm }}"
  become: true

- name: Ensures /opt/neovim folder exists
  ansible.builtin.file:
    path: "/opt/neovim"
    state: directory
    mode: '0755'
  become: true
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Download Neovim Package
  ansible.builtin.get_url:
    url: https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
    dest: /opt/neovim/nvim.appimage
    mode: '0755'
    force: true
  become: true
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Create a symbolic link to nvim app image
  ansible.builtin.file:
    src: /opt/neovim/nvim.appimage
    dest: /opt/neovim/nvim
    state: link
  become: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (not lookup('ansible.builtin.env', 'CONTAINER') )

- name: Extract neovim app image
  ansible.builtin.shell: |
    /opt/neovim/nvim.appimage --appimage-extract
  args:
    chdir: /opt/neovim
    creates: /opt/neovim/squashfs-root/AppRun
  become: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and lookup('ansible.builtin.env', 'CONTAINER')

- name: Create a symbolic link to extracted nvim app image
  ansible.builtin.file:
    src: /opt/neovim/squashfs-root/AppRun
    dest: /opt/neovim/nvim
    state: link
  become: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and lookup('ansible.builtin.env', 'CONTAINER')

- name: Ensures config dir exists
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/.config/nvim/autoload"
    state: directory
    mode: '0700'

- name: Install neovim Plugin Manager plug
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    dest: "{{ ansible_user_dir }}/.config/nvim/autoload/plug.vim"
    mode: '0600'

- name: Generate templates
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "{{ ansible_user_dir }}/.{{ item }}"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: '0600'
  with_items: "{{ role_vim.environment.home.templates }}"

- name: Generate neovim config
  ansible.builtin.template:
    src: init.vim.j2
    dest: "{{ ansible_user_dir }}/.config/nvim/init.vim"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: '0600'

- name: Ensures lua dir exists
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/.config/nvim/lua"
    state: directory
    mode: '0700'

- name: Generate neovim lua config
  ansible.builtin.template:
    src: init.lua.j2
    dest: "{{ ansible_user_dir }}/.config/nvim/lua/init.lua"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: '0600'

- name: Update alternatives
  community.general.alternatives:
    name: vi
    link: /usr/bin/vi
    path: /opt/neovim/nvim
  become: true
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Install neovim Plugins
  ansible.builtin.shell: /opt/neovim/nvim --headless -c 'PlugInstall --sync' -c qa
  args:
    creates: "{{ ansible_user_dir }}/.config/nvim/plugins"
    executable: /bin/bash

- name: Update neovim Plugins
  ansible.builtin.shell: |
    /opt/neovim/nvim --headless -c 'PlugUpdate --sync' -c qa && /opt/neovim/nvim --headless -c 'PlugClean --sync' -c qa
  when: update | default(False)
  register: updateneovimplugins
  changed_when: updateneovimplugins.rc != 0

- name: Ensures lsp dir exists
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/.config/nvim/lsp"
    state: directory
    mode: '0700'

- name: Install puppet language server
  ansible.builtin.git:
    repo: https://github.com/lingua-pupuli/puppet-editor-services.git
    dest: "{{ ansible_user_dir }}/.config/nvim/lsp/puppet-editor-services"
    clone: true
    update: false
    depth: 1
    accept_hostkey: true
    version: main
  register: repo_clone

- name: Compile puppet language server
  ansible.builtin.shell: |
    bundle install
    bundle exec rake gem_revendor
  args:
    chdir: "{{ ansible_user_dir }}/.config/nvim/lsp/puppet-editor-services"
    executable: /bin/bash
  become: true

- name: Ensures local font dir exists
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/.fonts"
    state: directory
    mode: '0700'

- name: Download nerd fonts
  ansible.builtin.unarchive:
    src: https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/Hack.zip
    dest: "{{ ansible_user_dir }}/.fonts"
    remote_src: true
    mode: '0600'
  register: downloadnerdfonts

- name: Install nerd fonts
  ansible.builtin.command: fc-cache -fv
  when: downloadnerdfonts.changed and (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  register: installnerdfonts
  changed_when: installnerdfonts.rc != 0
  failed_when: installnerdfonts.rc != 0

- name: Debug message to ensure the user is restarting his terminal
  ansible.builtin.debug:
    msg: You have to restart your terminal
  when: installnerdfonts.changed
 
