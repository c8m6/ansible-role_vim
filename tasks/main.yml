- name: run apt-get update
  apt: update_cache=yes cache_valid_time=86400
  become: true
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  tags:
    - become

- name: install some needed packages
  apt: name={{item}} state=present
  with_items:
    - "{{ role_vim.install.apt }}"
  become: true
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  tags:
    - become

- name: install some needed packages with pip
  pip: name={{item}} extra_args='--user'
  with_items:
    - "{{ role_vim.install.mac_pip }}"
  when: ansible_distribution == 'MacOSX'

- name: tap with homebrew
  homebrew_tap: name={{item}} state=present
  with_items:
    - "{{ role_vim.repo.homebrew }}"
  when: ansible_distribution == 'MacOSX'

- name: install some needed packages with homebrew
  homebrew: name={{item}} state=present
  with_items:
    - "{{ role_vim.install.homebrew }}"
  when: ansible_distribution == 'MacOSX'

- name: cleanup users .vimrc
  file:
    path: "{{ ansible_user_dir }}/.vimrc"
    state: absent
  when: cleanup | default(False)

- name: cleanup users .viminfo
  file:
    path: "{{ ansible_user_dir }}/.viminfo"
    state: absent
  when: cleanup | default(False)

- name: cleanup permissions of .vim directory
  file:
    path: "{{ ansible_user_dir }}/.vim"
    state: directory
    recurse: yes
    mode: 0755
  when: cleanup | default(False)

- name: cleanup users .vim
  file:
    path: "{{ ansible_user_dir }}/.vim"
    state: absent
  when: cleanup | default(False)

- name: create dir for vim pathogen
  file:
    path: "{{ ansible_user_dir }}/.vim/autoload/"
    state: directory

- name: Install vim pathogen
  get_url:
    url: https://raw.githubusercontent.com/tpope/vim-pathogen/master/autoload/pathogen.vim
    dest: "{{ ansible_user_dir }}/.vim/autoload/pathogen.vim"

- name: Install vim modules
  git:
    repo: "{{ item.value }}"
    dest: "{{ ansible_user_dir }}/.vim/bundle/{{ item.key }}"
    clone: yes
    update: yes
    accept_hostkey: yes
  with_dict: "{{ role_vim.vim.module }}"

- name: compile vim autocomplete
  shell: |
    git config --global url."https://".insteadOf git:// # Prevent any connection refused errors
    git submodule update --init --recursive
    python3 install.py --all
    git config --global --unset-all url.https://.insteadof
  args:
    chdir: "{{ ansible_user_dir }}/.vim/bundle/YouCompleteMe"
    creates: "{{ ansible_user_dir }}/.vim/bundle/YouCompleteMe/third_party/ycmd/ycm_core.so"
    executable: /bin/bash

- name: compile vim command-t
  shell: |
    git config --global url."https://".insteadOf git:// # Prevent any connection refused errors
    git submodule update --init --recursive
    rake make
    git config --global --unset-all url.https://.insteadof
  args:
    chdir: "{{ ansible_user_dir }}/.vim/bundle/command-t/ruby/command-t/ext/command-t"
    creates: "{{ ansible_user_dir }}/.vim/bundle/command-t/ruby/command-t/ext/command-t/ext.so"
    executable: /bin/bash

- name: generate templates
  template:
    src: "{{ item }}.j2"
    dest: "{{ ansible_user_dir }}/.{{ item }}"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: 0600
  with_items: "{{ role_vim.environment.home.templates }}"
