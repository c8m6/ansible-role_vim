---
- name: install some needed packages
  apt: name={{ role_vim.install.apt }} state=latest
  become: true
  #  update_cache: true
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  tags:
    - become

- name: install some mac specific packages with pip
  pip: name={{ role_vim.install.mac_pip }} extra_args='--user'
  when: ansible_distribution == 'MacOSX'

- name: install packages with gem
  gem: name={{ item }} state=present
  with_items:
    - "{{ role_vim.install.gem }}"

- name: tap with homebrew
  homebrew_tap: name={{ role_vim.repo.homebrew }} state=present
  when: ansible_distribution == 'MacOSX'

- name: install some needed packages with homebrew
  homebrew: name={{ role_vim.install.homebrew }} state=present
  when: ansible_distribution == 'MacOSX'

- name: Download Neovim Package
  get_url:
    url: https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
    dest: /usr/local/bin/nvim.appimage
    mode: '0755'
    force: true
  become: true
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  tags:
    - become

- name: ensures config dir exists
  file:
    path: "{{ ansible_user_dir }}/.config/nvim/autoload"
    state: directory

- name: Install neovim Plugin Manager plug
  get_url:
    url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    dest: "{{ ansible_user_dir }}/.config/nvim/autoload/plug.vim"

- name: generate templates
  template:
    src: "{{ item }}.j2"
    dest: "{{ ansible_user_dir }}/.{{ item }}"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: 0600
  with_items: "{{ role_vim.environment.home.templates }}"

- name: generate neovim config
  template:
    src: init.vim.j2
    dest: "{{ ansible_user_dir }}/.config/nvim/init.vim"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: 0600

- name: Update alternatives
  alternatives:
    name: vi
    path: /usr/local/bin/nvim.appimage
  become: true
  tags:
    - become
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Install neovim Plugins
  shell: /usr/local/bin/nvim.appimage --headless -c 'PlugInstall --sync' -c qa
  args:
    creates: "{{ ansible_user_dir }}/.config/nvim/plugins"
    executable: /bin/bash

- name: Update neovim Plugins
  shell: /usr/local/bin/nvim.appimage --headless -c 'PlugUpdate --sync' -c qa && /usr/local/bin/nvim.appimage --headless -c 'PlugClean --sync' -c qa
  when: update | default(False)

- name: ensures lsp dir exists
  file:
    path: "{{ ansible_user_dir }}/.config/nvim/lsp"
    state: directory

- name: Install puppet language server
  git:
    repo: https://github.com/lingua-pupuli/puppet-editor-services.git
    dest: "{{ ansible_user_dir }}/.config/nvim/lsp/puppet-editor-services"
    clone: yes
    update: yes
    depth: 1
    accept_hostkey: yes
  register: repo_clone
  failed_when:
    - repo_clone.failed
    - not 'Local modifications exist in repository' in repo_clone.msg

- name: compile puppet language server
  shell: |
    bundle install
    bundle exec rake gem_revendor
  args:
    creates: "{{ ansible_user_dir }}/.config/nvim/lsp/puppet-editor-services/puppet-languageserver"
    chdir: "{{ ansible_user_dir }}/.config/nvim/lsp/puppet-editor-services"
    executable: /bin/bash

- name: ensures local font dir exists
  file:
    path: "{{ ansible_user_dir }}/.fonts"
    state: directory

- name: Download nerd fonts
  unarchive:
    src: https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/Hack.zip
    dest: "{{ ansible_user_dir }}/.fonts"
    remote_src: yes
  register: downloadnerdfonts

- name: Install nerd fonts
  shell: fc-cache -fv
  when: downloadnerdfonts is changed

